Functional test for user registration
=====================================

:Test-Layer: functional

  >>> from zope.testbrowser.testing import Browser
  >>> browser = Browser()

Enable this before the wanted line to view server errors
  >>> #browser.handleErrors = False

Prerequisites
-------------

We add the toplevel grok application:

  >>> browser.addHeader('Authorization', 'Basic mgr:mgrpw')
  >>> browser.addHeader('Accept-Language', 'en-US')
  >>> browser.open('http://localhost:8080/applications/')
  >>> browser.getControl(name='name').value = u'barcamp'
  >>> browser.getControl(name='Add').click()

Then we add a meeting:

  >>> browser.open('http://localhost:8080/barcamp/@@addmeeting')
  >>> browser.getControl(name='form.name').value = u'pycon fr'
  >>> browser.getControl(name='form.address').value = u'pycon fr'
  >>> browser.getControl(name='form.start_date').value = '2008-05-04'
  >>> browser.getControl(name='form.end_date').value = '2008-05-07'
  >>> browser.getControl('Add').click()

Adding a conference
-------------------

We can add a seance:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/@@add')
  >>> browser.getControl(name='form.name').value = u'about grok'
  >>> browser.getControl(name='form.date').value = u'2008-05-06'
  >>> browser.getControl('Add').click()

Then visit the conference:

  >>> browser.handleErrors = False
  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/about_grok')
  >>> browser.headers['status']
  '200 Ok'

Registering and unregistering to a conference
---------------------------------------------

Now we can register to this conference:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/about_grok/@@registrationpage')
  >>> browser.getControl(name='nickname').value = u'ccomb'
  >>> browser.getControl(name='register').click()
  >>> 'been added' in browser.contents
  True

We check that the user has been added:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/people/ccomb/')

If I want to register again, it should tell we are already registered:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/about_grok/@@registrationpage')
  >>> 'already registered' in browser.contents
  True

We cannot edit the list of seances:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/@@edit')
  'forbidden'

Then we can unregister from this conference:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/about_grok/')
  >>> browser.getControl(name='unregister').click()
  >>> 'been removed from' in browser.contents
  True
  >>> browser.getControl(name='unregister')
  Traceback (most recent call last):
  ...
  LookupError: name 'unregister'


Reregistering, and registering again as different user
-------------------------------------------------------

We re-register as ccomb:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/about_grok/')
  >>> browser.getControl(name='register').click()
  >>> 'been added' in browser.contents
  True

Now we want to register as faide. We can click on 'change user':

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/about_grok/')
  >>> browser.getLink(url='?new').click()
  >>> browser.getControl(name='nickname').value == ''
  True
  >>> browser.getControl(name='nickname').value = u'faide'
  >>> browser.getControl(name='register').click()
  >>> 'been added' in browser.contents
  True

Registering on the meeting itself
-------------------------------

We are not interested in a particular presentation,
but we want to attend the meeting
