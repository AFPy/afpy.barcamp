Functional test for user attendance
===================================

:Test-Layer: functional

  >>> from zope.testbrowser.testing import Browser
  >>> browser = Browser()

Enable this before the wanted line to view server errors
  >>> #browser.handleErrors = False

Prerequisites
-------------

We add the toplevel grok application:

  >>> browser.addHeader('Authorization', 'Basic mgr:mgrpw')
  >>> browser.addHeader('Accept-Language', 'en-US')
  >>> browser.open('http://localhost:8080/applications/')
  >>> browser.getControl(name='name').value = u'barcamp'
  >>> browser.getControl(name='Add').click()

Then we add a meeting:

  >>> browser.open('http://localhost:8080/barcamp/@@add')
  >>> browser.getControl(name='form.name').value = u'pycon fr'
  >>> browser.getControl(name='form.address').value = u'pycon fr'
  >>> browser.getControl(name='form.start_date').value = '2008-05-04'
  >>> browser.getControl(name='form.end_date').value = '2008-05-07'
  >>> browser.getControl('Add').click()

Adding a conference
-------------------

We can add a seance:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/@@add')
  >>> browser.getControl(name='form.name').value = u'about grok'
  >>> browser.getControl('Add').click()

Then visit the conference:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/about_grok')
  >>> browser.headers['status']
  '200 Ok'

We add a new person. The new person is added
into the people list, but is not yet registered on the meeting:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/people/add')
  >>> browser.getControl(name='people.login').value = u'ccomb'
  >>> browser.getControl(name='people.firstname').value = u'ccomb'
  >>> browser.getControl(name='people.lastname').value = u'ccomb'
  >>> browser.getControl(name='people.email').value = u'ccomb@test.com'
  >>> browser.getControl(name='people.password').value = u'ccombsecret'
  >>> browser.getControl('Add this person').click()

Now we logout and return to the conference

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/logout')
  >>> del browser
  >>> browser = Browser()


Registering and unregistering to a conference
---------------------------------------------

Now we can register to this seance, and when doing so we need to login:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/about_grok')
  >>> browser.getControl('I want to attend!').click()
  >>> browser.getControl(name='form.login').value = u'ccomb'
  >>> browser.getControl(name='form.password').value = u'ccombsecret'
  >>> browser.getControl('login').click()
  >>> 'been added' in browser.contents
  True

We cannot edit the list of seances:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/@@edit')
  Traceback (most recent call last):
  ...
  httperror_seek_wrapper: HTTP Error 403: Forbidden

Then we can unregister from this conference:

  >>> browser.open('http://localhost:8080/barcamp/pycon_fr/seances/about_grok/')
  >>> browser.getControl('I don\'t want to attend').click()
  >>> 'been removed from' in browser.contents
  True


Registering on the meeting itself
-------------------------------

We are not interested in a particular presentation,
but we want to attend the meeting

